function [egoVehicle, scenario, sensors] = ds2_lanes_roadWith2Cars()
%ds2_lanes_roadWith2Cars - Returns sensor detections
%    allData = ds2_lanes_roadWith2Cars returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = ds2_lanes_roadWith2Cars optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 17-Jul-2023 14:12:36

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors] = createSensors(scenario);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{2} = lidarPointCloudGenerator('SensorIndex', 2, ...
    'SensorLocation', [1.5 0], ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [90 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-90 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
numSensors = 5;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario("SampleTime", 1.0, 'StopTime', 20);

% Add all road segments
roadCenters = [2.9 0.4 0;
    54.4 0.1 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [30 27.9 0;
    29.4 -30.7 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [10.9 -1.4 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
% waypoints = [16.9 -1.4 0;
%     25 -1.4 0;
%     34.3 -1.4 0;
%     53.4 -1.4 0];
% speed = [30;30;30;30];
% trajectory(egoVehicle, waypoints, speed);
% 
% Add the non-ego actors
vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [100.5 -1.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [23.9 -1.3 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');

