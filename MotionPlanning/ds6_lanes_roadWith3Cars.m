function [egoVehicle, scenario, sensors] = ds6_lanes_roadWith3Cars()
%ds6_lanes_roadWith3Cars - Returns sensor detections
%    allData = ds6_lanes_roadWith3Cars returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = ds6_lanes_roadWith3Cars optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 26-Jul-2023 14:08:35

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensors = createSensors(scenario);


%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'DetectorOutput', 'Lanes and objects', ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [2.8 0.9], ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 -0.9], ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = lidarPointCloudGenerator('SensorIndex', 4, ...
    'SensorLocation', [1.5 0], ...
    'ActorProfiles', profiles);
numSensors = 4;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario("SampleTime", 1.0, "StopTime", 20.0);

% Add all road segments
roadCenters = [94.4 6.4 0;
    -15.8 5.4 0];
marking1 = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Solid')];

marking2 = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Solid')];

laneSpecifications = [lanespec(6, 'Marking', marking1)
    lanespec(6, 'Marking', marking2)];
lsConnector = laneSpecConnector('TaperShape', 'None');
compLaneSpecification = compositeLaneSpec(laneSpecifications, 'Connector', lsConnector);
road(scenario, roadCenters, 'Lanes', compLaneSpecification, 'Name', 'Road');

roadCenters = [41.1 -69.2 0;
    40 65.1 0];
marking1 = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Solid')];

marking2 = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Dashed')
    laneMarking('Solid')];

laneSpecifications = [lanespec(6, 'Marking', marking1)
    lanespec(6, 'Marking', marking2)];
lsConnector = laneSpecConnector('TaperShape', 'None');
compLaneSpecification = compositeLaneSpec(laneSpecifications, 'Connector', lsConnector);
road(scenario, roadCenters, 'Lanes', compLaneSpecification, 'Name', 'Road1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-12.4664923117851 0.00531897259204506 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
% waypoints = [-12.4664923117851 0.00531897259204506 0;
%     26.9 -0.0999999999999996 0;
%     53 0.5 0;
%     89 1.1 0];
% speed = [15;15;15;15];
% trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-2.00076692792345 3.49807732411514 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [-2.00076692792345 3.49807732411514 0;
    92.7 4.3 0];
speed = [0;15];
waittime = [1;0];
trajectory(car1, waypoints, speed, waittime);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-4.89237136947783 -0.0813640356612807 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');
waypoints = [-4.89237136947783 -0.0813640356612807 0;
    8.2 0 0;
    18.6 0 0;
    30.4 0 0];
speed = [0;15;15;0];
waittime = [1;0;0;10];
trajectory(car2, waypoints, speed, waittime);

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [38.6 27.9 0], ...
    'Yaw', 90, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car3');

car4 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [12.9571985436032 0.524482076375594 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car4');
waypoints = [12.9571985436032 0.524482076375594 0;
    23.1 -3.2 0;
    32.5 -5.5 0;
    35.1 -13.2 0;
    35.4 -42.5 0];
speed = [0;7;5;6;8];
waittime = [1;0;0;0;0];
trajectory(car4, waypoints, speed, waittime);

