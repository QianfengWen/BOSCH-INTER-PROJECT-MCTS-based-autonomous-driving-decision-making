function [scenario, egoVehicle, sensors] = stuckedCar()
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 13-Jul-2023 15:48:17
[scenario, egoVehicle] = createDrivingScenario;

sensors = createSensors(scenario);


function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = lidarPointCloudGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits', [-20 20], ...
    'ActorProfiles', profiles);

sensors{2} = lidarPointCloudGenerator('SensorIndex', 2, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 75, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20], ...
    'ActorProfiles', profiles);

sensors{3} = lidarPointCloudGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 135, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian',...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20],...
    'ActorProfiles', profiles);

sensors{4} = lidarPointCloudGenerator('SensorIndex', 4, ...
    'SensorLocation', [-1 0], ...
    'Yaw', 180, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20],...
    'ActorProfiles', profiles);

sensors{5} = lidarPointCloudGenerator('SensorIndex', 5, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -75, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20], ...
    'ActorProfiles', profiles);

sensors{6} = lidarPointCloudGenerator('SensorIndex', 6, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -135, ...
    'MaxRange', 100, ...
    'DetectionCoordinates', 'Sensor Cartesian', ...
    'HasOrganizedOutput', false, ...
    'HasEgoVehicle', false, ...
    'HasRoadsInputPort', false, ...
    'AzimuthLimits', [-45 45], ...
    'ElevationLimits',[-20 20],...
    'ActorProfiles', profiles);

numSensors = 6;

for i = 1:numSensors
    sensors{i}.AzimuthResolution = 0.16;
    sensors{i}.Height = 0.4;
    sensors{i}.HasRoadsInputPort = false;
    sensors{i}.HasOrganizedOutput = false;
end


function [scenario, egoVehicle] = createDrivingScenario

scenario = drivingScenario;
% Add all road segments
roadCenters = [59.3 0 0;
    1 0.3 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [31.9 27.7 0;
    31.4 -27.9 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [20.5 -1.9 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
% waypoints = [20.5 -1.9 0;
%     26.6 -1.7 0;
%     36.7 -1.4 0;
%     58 -1.4 0];
% speed = [30;30;30;30];
% trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
% car1 = vehicle(scenario, ...
%     'ClassID', 1, ...
%     'Position', [60.7 -1.4 0], ...
%     'Mesh', driving.scenario.carMesh, ...
%     'Name', 'Car1');
%     waypoints = [60.7 -1.4 0;
%         60.7 -1.4 0];   
%     speed = [0; 0];
%     trajectory(car1, waypoints, speed);
car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-17.399761832911 4.36855538572968 0], ...
    'FrontOverhang', 0.9, ...
    'Wheelbase', 2.8, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car6');
